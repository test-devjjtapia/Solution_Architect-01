# .github/workflows/ci-cd-pipeline.yml
#
# Ejemplo de un pipeline de Integración y Despliegue Continuo (CI/CD) usando GitHub Actions.
#
# Este pipeline se activa automáticamente cada vez que se realiza un `push` a la rama `main`.
# Sus responsabilidades son:
# 1. Preparar el entorno de ejecución (Ubuntu).
# 2. Instalar las dependencias del proyecto.
# 3. Ejecutar las pruebas automatizadas (unitarias, integración, etc.).
# 4. Si las pruebas pasan, construir una imagen Docker del microservicio.
# 5. Etiquetar la imagen con el hash del commit para un versionamiento preciso.
# 6. Autenticarse en un registro de contenedores (en este caso, Docker Hub).
# 7. Publicar (push) la imagen en el registro para que pueda ser desplegada.

name: CI/CD Pipeline for Microservice

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    # Paso 1: Clonar el repositorio para tener acceso al código
    - name: Checkout repository
      uses: actions/checkout@v3

    # Paso 2: Configurar el entorno de Python
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    # Paso 3: Instalar las dependencias de la aplicación y de las pruebas
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Paso 4: Ejecutar las pruebas (ej. con pytest)
    - name: Run unit and integration tests
      run: |
        pytest

    # --- Los siguientes pasos solo se ejecutan en un push a 'main', no en Pull Requests ---
    
    # Paso 5: Iniciar sesión en el registro de contenedores (Docker Hub)
    - name: Log in to Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }} # Secreto configurado en GitHub
        password: ${{ secrets.DOCKERHUB_TOKEN }}    # Secreto configurado en GitHub

    # Paso 6: Construir la imagen Docker y publicarla
    - name: Build and push Docker image
      if: github.event_name == 'push'
      uses: docker/build-push-action@v4
      with:
        context: . # Directorio raíz del Dockerfile
        push: true # Indica que se debe publicar la imagen
        # Etiqueta la imagen con el SHA del commit para trazabilidad
        tags: yourusername/your-microservice:${{ github.sha }}
